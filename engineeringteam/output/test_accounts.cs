using System;\nusing System.Collections.Generic;\nusing NUnit.Framework;\n\n[TestFixture]\npublic class AccountTests\n{\n    private Account account;\n\n    [SetUp]\n    public void Setup()\n    {\n        account = new Account(\"12345\");\n    }\n\n    [Test]\n    public void TestDeposit_PositiveAmount_IncreasesBalance()\n    {\n        account.Deposit(100);\n        Assert.AreEqual(100, account.Balance);\n    }\n\n    [Test]\n    public void TestDeposit_NegativeAmount_ThrowsArgumentException()\n    {\n        Assert.Throws<ArgumentException>(() => account.Deposit(-50));\n    }\n\n    [Test]\n    public void TestWithdraw_AmountLessThanBalance_DecreasesBalance()\n    {\n        account.Deposit(100);\n        account.Withdraw(50);\n        Assert.AreEqual(50, account.Balance);\n    }\n\n    [Test]\n    public void TestWithdraw_AmountGreaterThanBalance_ThrowsInvalidOperationException()\n    {\n        account.Deposit(100);\n        Assert.Throws<InvalidOperationException>(() => account.Withdraw(150));\n    }\n\n    [Test]\n    public void TestBuyShares_ValidTransaction_UpdatesHoldingsAndBalance()\n    {\n        account.Deposit(1000);\n        account.BuyShares(\"AAPL\", 5);\n        Assert.AreEqual(5, account.GetHoldings()[\"AAPL\"]);\n        Assert.AreEqual(1000 - (150.0 * 5), account.Balance);\n    }\n\n    [Test]\n    public void TestBuyShares_InsufficientFunds_ThrowsInvalidOperationException()\n    {\n        account.Deposit(100);\n        Assert.Throws<InvalidOperationException>(() => account.BuyShares(\"AAPL\", 1));\n    }\n\n    [Test]\n    public void TestSellShares_ValidTransaction_UpdatesHoldingsAndBalance()\n    {\n        account.Deposit(1000);\n        account.BuyShares(\"AAPL\", 5);\n        account.SellShares(\"AAPL\", 2);\n        Assert.AreEqual(3, account.GetHoldings()[\"AAPL\"]);\n        Assert.AreEqual(1000 - (150.0 * 5) + (150.0 * 2), account.Balance);\n    }\n\n    [Test]\n    public void TestSellShares_NotEnoughShares_ThrowsInvalidOperationException()\n    {\n        account.Deposit(1000);\n        account.BuyShares(\"AAPL\", 2);\n        Assert.Throws<InvalidOperationException>(() => account.SellShares(\"AAPL\", 3));\n    }\n\n    [Test]\n    public void TestCalculatePortfolioValue_ReturnsCorrectValue()\n    {\n        account.Deposit(1000);\n        account.BuyShares(\"AAPL\", 2);\n        account.BuyShares(\"TSLA\", 1);\n        double expectedValue = 1000 - (150.0 * 2) - 700 + (150.0 * 2) + (700.0 * 1);\n        Assert.AreEqual(expectedValue, account.CalculatePortfolioValue());\n    }\n\n    [Test]\n    public void TestGetTransactions_ReturnsCorrectTransactionList()\n    {\n        account.Deposit(100);\n        account.Withdraw(50);\n        var transactions = account.GetTransactions();\n        Assert.AreEqual(2, transactions.Count);\n    }\n}\n"